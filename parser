import os
import bz2
import shutil
import multiprocessing
from joblib import Parallel, delayed
import awpy  # CS2 demo parser
import psycopg2

# PostgreSQL Connection Config
DB_NAME = "cs2_db"
DB_USER = "postgres"
DB_PASS = "gE=XG'99"
DB_HOST = "localhost"
DB_PORT = "5433"

# Temporary Directory (RAM Disk)
TEMP_DIR = "/mnt/ramdisk/cs2_demos" #````````````````````````````````````````````````````Need to make R://path for this. This won't work in windows

# Ensure RAM disk directory exists
os.makedirs(TEMP_DIR, exist_ok=True)

def extract_demo(archive_path):
    """
    Extracts a compressed CS2 demo file into the RAM disk and returns the extracted file path.
    """
    try:
        file_name = os.path.basename(archive_path).replace(".bz2", ".dem")
        extracted_path = os.path.join(TEMP_DIR, file_name)

        with bz2.BZ2File(archive_path, "rb") as source, open(extracted_path, "wb") as target:
            shutil.copyfileobj(source, target)

        return extracted_path
    except Exception as e:
        print(f"Error extracting {archive_path}: {e}")
        return None

def parse_demo(demo_file):
    """
    Parses a CS2 demo and stores the extracted data in PostgreSQL.
    """
    try:
        parser = awpy.DemoParser(demo_file)
        data = parser.parse()

        conn = psycopg2.connect(
            dbname=DB_NAME, user=DB_USER, password=DB_PASS, host=DB_HOST, port=DB_PORT
        )
        cur = conn.cursor()

        for round_data in data["gameRounds"]:
            cur.execute(
                """
                INSERT INTO rounds (match_id, round_number, winning_team_id, win_condition, round_start_time)
                VALUES (%s, %s, %s, %s, %s)
                """,
                (
                    data["matchID"], 
                    round_data["roundNum"], 
                    round_data["winningSide"], 
                    round_data["winType"],
                    round_data["startTick"]
                )
            )

        conn.commit()
        cur.close()
        conn.close()
        print(f"Parsed and stored match {data['matchID']} successfully!")

    except Exception as e:
        print(f"Error parsing {demo_file}: {e}")

def process_demo(archive_path):
    """
    Handles full process: extracting, parsing, and cleanup (deletion) in RAM.
    """
    try:
        # Extract demo into RAM
        demo_path = extract_demo(archive_path)
        if not demo_path:
            return

        print(f"Extracted demo: {demo_path}")

        # Parse demo
        parse_demo(demo_path)

        # Cleanup (delete extracted demo and archive)
        os.remove(demo_path)
        os.remove(archive_path)

        print(f"Deleted demo and archive: {demo_path}")

    except Exception as e:
        print(f"Error processing {archive_path}: {e}")

if __name__ == "__main__":
    # Get all .bz2 files from demo directory
    demo_dir = "/path/to/demos"  # Change to your actual demo archive path
    demo_files = [os.path.join(demo_dir, file) for file in os.listdir(demo_dir) if file.endswith(".bz2")]

    # Number of parallel workers (adjust based on CPU)
    num_workers = min(multiprocessing.cpu_count() - 2, 8)  # Reserve 2 CPU cores

    print(f"Processing {len(demo_files)} demos using {num_workers} workers...")

    # Run parallel processing
    Parallel(n_jobs=num_workers)(delayed(process_demo)(demo) for demo in demo_files)
